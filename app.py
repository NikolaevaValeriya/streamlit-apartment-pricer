import streamlit as st
import pandas as pd
import joblib
import numpy as np 

st.set_page_config(
    page_title="–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ —Ü–µ–Ω –Ω–∞ –∫–≤–∞—Ä—Ç–∏—Ä—ã",
    layout="wide",
    initial_sidebar_state="expanded"
)

# --- 1. –ó–∞–≥—Ä—É–∑–∫–∞ –æ–±—É—á–µ–Ω–Ω–æ–≥–æ –º–æ–¥–µ–ª–∏ ---
@st.cache_resource
def load_model(model_path):
    try:
        model = joblib.load(model_path)
        return model
    except FileNotFoundError:
        st.error(f"–§–∞–π–ª –º–æ–¥–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ –ø—É—Ç–∏: {model_path}. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
        return None
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–æ–¥–µ–ª–∏: {e}")
        return None

MODEL_PATH = 'my_apartment_xgb_model.joblib' 
model = load_model(MODEL_PATH)

# --- 2. –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ---
st.title("–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∞—Ä–µ–Ω–¥—ã –∫–≤–∞—Ä—Ç–∏—Ä—ã üè†")
st.write("""
–≠—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –º–æ–¥–µ–ª—å –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
—Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∞—Ä–µ–Ω–¥—ã –∫–≤–∞—Ä—Ç–∏—Ä—ã –≤ –ù–∏–∂–Ω–µ–º –ù–æ–≤–≥–æ—Ä–æ–¥–µ. –í–≤–µ–¥–∏—Ç–µ –æ—Å–Ω–æ–≤–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –≤ –º–µ–Ω—é —Å–ª–µ–≤–∞.
–î–ª—è –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º–µ–¥–∏–∞–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.
""")

# --- 3. –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –∏ –∏—Ö –º–µ–¥–∏–∞–Ω ---
all_expected_features = [
    'number_of_rooms', 'square', 'kitchen_square', 'extra', 'pets_allowed', 'floor',
    'floors_in_house', 'distance_to_center', 'cafes_count', 'bus_dist', 'sports_count',
    'school_dist', 'shops_count', 'culture_count', 'washing_machine', 'conditioner',
    'water_heater', 'balcony', 'balcony_loggia', 'loggia', 'payment_by_tags_included',
    'repair_designer', 'repair_euro', 'repair_needed', 'bathroom_separate',
    'batroom_combined_separate', 'room_isolated', 'room_isolated_connecting',
    'room_connecting', 'min_metro_time_5', 'min_metro_time_6', 'min_metro_time_11',
    'min_metro_time_16', 'min_metro_time_21', 'min_metro_time_31'
]

all_medians = {
    'number_of_rooms': 1.0, 'square': 43.0, 'kitchen_square': 9.0, 'extra': 0.0,
    'pets_allowed': 0.0, 'floor': 5.0, 'floors_in_house': 10.0,
    'distance_to_center': 8.053700, 'cafes_count': 11.0, 'bus_dist': 0.430000,
    'sports_count': 39.0, 'school_dist': 0.632500, 'shops_count': 26.0,
    'culture_count': 0.0, 'washing_machine': 0.0, 'conditioner': 0.0,
    'water_heater': 0.0, 'balcony': 0.0, 'balcony_loggia': 0.0, 'loggia': 0.0,
    'payment_by_tags_included': 0.0, 'repair_designer': 0.0, 'repair_euro': 0.0,
    'repair_needed': 0.0, 'bathroom_separate': 0.0, 'batroom_combined_separate': 0.0,
    'room_isolated': 0.0, 'room_isolated_connecting': 0.0, 'room_connecting': 0.0,
    'min_metro_time_5': 0.0, 'min_metro_time_6': 0.0, 'min_metro_time_11': 0.0,
    'min_metro_time_16': 0.0, 'min_metro_time_21': 0.0, 'min_metro_time_31': 0.0
}

for key, value in all_medians.items():
    is_binary_or_integer_count = key in [
        'washing_machine', 'conditioner', 'repair_designer', 'extra', 'pets_allowed',
        'water_heater', 'balcony', 'balcony_loggia', 'loggia', 'payment_by_tags_included',
        'repair_euro', 'repair_needed', 'bathroom_separate', 'batroom_combined_separate',
        'room_isolated', 'room_isolated_connecting', 'room_connecting',
        'min_metro_time_5', 'min_metro_time_6', 'min_metro_time_11',
        'min_metro_time_16', 'min_metro_time_21', 'min_metro_time_31'
    ] or (value == int(value) and key not in [
        'distance_to_center', 'bus_dist', 'school_dist', 'kitchen_square', 'square'
    ]) or key in ['cafes_count', 'culture_count', 'shops_count', 'sports_count', 'number_of_rooms', 'floor', 'floors_in_house']

    if is_binary_or_integer_count:
        all_medians[key] = int(value)

# –ü—Ä–∏–∑–Ω–∞–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –í–°–ï–ì–î–ê –≤–≤–æ–¥–∏—Ç –Ω–∞–ø—Ä—è–º—É—é
user_selectable_features_direct_input = [
    'square', 'washing_machine', 'distance_to_center', 'repair_designer',
    'conditioner', 'repair_euro', 'floors_in_house'
]

# –ü—Ä–∏–∑–Ω–∞–∫–∏, –¥–ª—è –∫–æ—Ç–æ—Ä—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ú–û–ñ–ï–¢ –≤–≤–µ—Å—Ç–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º–µ–¥–∏–∞–Ω—É
user_selectable_features_optional_input = [
    'cafes_count', 'culture_count'
]

# –°–∫—Ä—ã—Ç—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ (–ò—Ö –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –±—É–¥—É—Ç –º–µ–¥–∏–∞–Ω–∞–º–∏)
default_hidden_features_median = {
    k: v for k, v in all_medians.items()
    if k not in user_selectable_features_direct_input
    and k not in user_selectable_features_optional_input
    and k not in ['kitchen_square', 'number_of_rooms'] 
}


if model:
    st.sidebar.header("–£–∫–∞–∂–∏—Ç–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∫–≤–∞—Ä—Ç–∏—Ä—ã:")
    binary_options_map = {"–î–∞": 1, "–ù–µ—Ç": 0}
    user_inputs = {} 

    # --- –ü–æ–ª—è –¥–ª—è –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ —Å –ø—Ä—è–º—ã–º –≤–≤–æ–¥–æ–º (–∫—Ä–æ–º–µ kitchen_square –∏ number_of_rooms) ---
    user_inputs['square'] = st.sidebar.number_input(
        "–û–±—â–∞—è –ø–ª–æ—â–∞–¥—å (–∫–≤. –º)",
        min_value=10.0, max_value=500.0, value=float(all_medians['square']), step=0.5,
        key='square_input_main'
    )
    user_inputs['floors_in_house'] = st.sidebar.number_input(
        "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç—Ç–∞–∂–µ–π –≤ –¥–æ–º–µ",
        min_value=1, max_value=100, value=int(all_medians['floors_in_house']), step=1,
        key='floors_in_house_input_main'
    )
    user_inputs['distance_to_center'] = st.sidebar.number_input(
        "–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ —Ü–µ–Ω—Ç—Ä–∞ –≥–æ—Ä–æ–¥–∞ (–∫–º)",
        min_value=0.0, max_value=100.0, value=float(all_medians['distance_to_center']), step=0.1,
        key='distance_to_center_input_main'
    )
    st.sidebar.markdown("---")
    washing_machine_label = st.sidebar.radio(
        "–ï—Å—Ç—å –ø–æ—Å—É–¥–æ–º–æ–µ—á–Ω–∞—è –º–∞—à–∏–Ω–∞?",
        options=["–ù–µ—Ç", "–î–∞"], index=int(all_medians['washing_machine']), key='washing_machine_label_main'
    )
    user_inputs['washing_machine'] = binary_options_map[washing_machine_label]

    repair_designer_label = st.sidebar.radio(
        "–†–µ–º–æ–Ω—Ç –¥–∏–∑–∞–π–Ω–µ—Ä—Å–∫–∏–π?",
        options=["–ù–µ—Ç", "–î–∞"], index=int(all_medians['repair_designer']), key='repair_designer_label_main'
    )
    user_inputs['repair_designer'] = binary_options_map[repair_designer_label]

    conditioner_label = st.sidebar.radio(
        "–ï—Å—Ç—å –∫–æ–Ω–¥–∏—Ü–∏–æ–Ω–µ—Ä?",
        options=["–ù–µ—Ç", "–î–∞"], index=int(all_medians['conditioner']), key='conditioner_label_main'
    )
    user_inputs['conditioner'] = binary_options_map[conditioner_label]

    repair_euro_label = st.sidebar.radio(
        "–†–µ–º–æ–Ω—Ç —Ç–∏–ø–∞ '–µ–≤—Ä–æ'?",
        options=["–ù–µ—Ç", "–î–∞"], index=int(all_medians['repair_euro']), key='repair_euro_label_main'
    )
    user_inputs['repair_euro'] = binary_options_map[repair_euro_label]
    st.sidebar.markdown("---")

    # --- –õ–æ–≥–∏–∫–∞ –¥–ª—è "–°—Ç—É–¥–∏–∏" ---
    is_studio = st.sidebar.checkbox(
        "–≠—Ç–æ —Å—Ç—É–¥–∏—è?",
        key='is_studio_cb',
        value=False, 
        help="–ï—Å–ª–∏ –æ—Ç–º–µ—á–µ–Ω–æ, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç –±—É–¥–µ—Ç 1, –∞ –ø–ª–æ—â–∞–¥—å –∫—É—Ö–Ω–∏ –¥–ª—è –º–æ–¥–µ–ª–∏ –±—É–¥–µ—Ç 0."
    )

    if is_studio:
        user_inputs['number_of_rooms'] = 1
        user_inputs['kitchen_square'] = 0.0
        st.sidebar.markdown(f"„Ö§‚û• *–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç (—Å—Ç—É–¥–∏—è): **1***")
        st.sidebar.markdown(f"„Ö§‚û• *–ü–ª–æ—â–∞–¥—å –∫—É—Ö–Ω–∏ (—Å—Ç—É–¥–∏—è): **0.0 –∫–≤. –º***")
    else:
        user_inputs['number_of_rooms'] = st.sidebar.number_input(
            "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç (1-–∫–æ–º–Ω. –∫–≤–∞—Ä—Ç–∏—Ä–∞ = 1)",
            min_value=1, max_value=10, value=int(all_medians.get('number_of_rooms', 1)), step=1,
            key='number_of_rooms_input_main_regular'
        )
        user_inputs['kitchen_square'] = st.sidebar.number_input(
            "–ü–ª–æ—â–∞–¥—å –∫—É—Ö–Ω–∏ (–∫–≤. –º)",
            min_value=0.0, max_value=100.0, value=float(all_medians.get('kitchen_square', 9.0)), step=0.5,
            key='kitchen_square_input_main_regular'
        )
    st.sidebar.markdown("---")

    # --- –ü–æ–ª—è —Å –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–º –≤–≤–æ–¥–æ–º –¥–ª—è cafes_count –∏ culture_count ---
    for feature_key in user_selectable_features_optional_input:
        median_value = all_medians[feature_key]
        feature_display_name = feature_key.replace('_', ' ').capitalize()

        if feature_key == 'cafes_count':
            label_text = "–ö–æ–ª-–≤–æ –∫–∞—Ñ–µ/—Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤ –≤ —Ä–∞–¥–∏—É—Å–µ 1 –∫–º"
            max_val = 300 
        elif feature_key == 'culture_count':
            label_text = "–ö–æ–ª-–≤–æ –æ–±—ä–µ–∫—Ç–æ–≤ –∫—É–ª—å—Ç—É—Ä—ã –≤ —Ä–∞–¥–∏—É—Å–µ 1 –∫–º"
            max_val = 200 
        else:
            label_text = feature_display_name
            max_val = 200

        use_custom_value = st.sidebar.checkbox(
            f"–£–∫–∞–∑–∞—Ç—å —Å–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è '{label_text}' (–º–µ–¥–∏–∞–Ω–∞: {median_value})",
            key=f'use_custom_{feature_key}_cb',
            value=False 
        )
        if use_custom_value:
            user_inputs[feature_key] = st.sidebar.number_input(
                label_text,
                min_value=0, max_value=max_val, value=int(median_value), step=1,
                key=f'{feature_key}_input_custom'
            )
        else:
            user_inputs[feature_key] = int(median_value) 
        st.sidebar.markdown("---")


    # --- 4. –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è ---
    if st.sidebar.button("‚ú® –ü—Ä–µ–¥—Å–∫–∞–∑–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å ‚ú®"):
        # --- 5. –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ü–û–õ–ù–û–ì–û –Ω–∞–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –º–æ–¥–µ–ª–∏ ---
        final_input_data = default_hidden_features_median.copy()
        final_input_data.update(user_inputs) 

        input_df_ordered_values = [final_input_data.get(name, pd.NA) for name in all_expected_features]
        input_df = pd.DataFrame([input_df_ordered_values], columns=all_expected_features)

        # --- 6. –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è ---
        try:
            prediction = model.predict(input_df)
            predicted_price = prediction[0]

            formatted_predicted_price_string = f"{predicted_price:,.0f}".replace(',', ' ')

            st.subheader("–†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è:")
            st.metric(label="–û—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–æ—á–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –∞—Ä–µ–Ω–¥—ã", value=f"{formatted_predicted_price_string} ‚ÇΩ/–º–µ—Å—è—Ü")
            st.success(f"–ú–æ–¥–µ–ª—å –ø—Ä–µ–¥—Å–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç—å –∞—Ä–µ–Ω–¥—ã –ø—Ä–∏–º–µ—Ä–Ω–æ –≤ **{formatted_predicted_price_string} ‚ÇΩ** –≤ –º–µ—Å—è—Ü (—Å —É—á–µ—Ç–æ–º –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é).")

            if is_studio:
                st.info("–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ —Å–¥–µ–ª–∞–Ω–æ —Å —É—á–µ—Ç–æ–º —Ç–æ–≥–æ, —á—Ç–æ —ç—Ç–æ —Å—Ç—É–¥–∏—è (1 –∫–æ–º–Ω–∞—Ç–∞, –ø–ª–æ—â–∞–¥—å –∫—É—Ö–Ω–∏ 0 –∫–≤.–º).")

        except Exception as e:
            st.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è: {e}")
            st.error("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ –ø–æ–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∏ –º–æ–¥–µ–ª—å –æ–±—É—á–µ–Ω–∞ –Ω–∞ –ø—Ä–∏–∑–Ω–∞–∫–∞—Ö —Å —Ç–∞–∫–∏–º–∏ –∂–µ –∏–º–µ–Ω–∞–º–∏ –∏ —Ç–∏–ø–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö.")
            st.error(f"–ò–º–µ–Ω–∞ –∫–æ–ª–æ–Ω–æ–∫, –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–µ –≤ –º–æ–¥–µ–ª—å: {input_df.columns.tolist()}")
else:
    if not model and MODEL_PATH:
         st.error("üö´ –ú–æ–¥–µ–ª—å –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–∞—Ö –≤—ã—à–µ.")
         st.info(f"–û–∂–∏–¥–∞–ª—Å—è —Ñ–∞–π–ª –º–æ–¥–µ–ª–∏ –ø–æ –ø—É—Ç–∏: {MODEL_PATH}")
